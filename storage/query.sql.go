// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package storage

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const checkIfUserExists = `-- name: CheckIfUserExists :one
SELECT
    COUNT(*)
FROM users
WHERE username = $1 OR phone_number = $2 AND deleted_at IS NULL
`

type CheckIfUserExistsParams struct {
	Username    string
	PhoneNumber string
}

func (q *Queries) CheckIfUserExists(ctx context.Context, arg CheckIfUserExistsParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, checkIfUserExists, arg.Username, arg.PhoneNumber)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    id, 
    username,
    full_name,
    phone_number,
    password_hash
) VALUES ($1, $2, $3, $4, $5)
RETURNING id
`

type CreateUserParams struct {
	ID           uuid.UUID
	Username     string
	FullName     string
	PhoneNumber  string
	PasswordHash string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.Username,
		arg.FullName,
		arg.PhoneNumber,
		arg.PasswordHash,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const deleteUser = `-- name: DeleteUser :exec
UPDATE users
SET 
    deleted_at = now()
WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT
    id,
    username,
    full_name,
    phone_number,
    role
FROM users
WHERE
    id = $1 AND deleted_at IS NULL
`

type GetUserRow struct {
	ID          uuid.UUID
	Username    string
	FullName    string
	PhoneNumber string
	Role        sql.NullString
}

func (q *Queries) GetUser(ctx context.Context, id uuid.UUID) (GetUserRow, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i GetUserRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.FullName,
		&i.PhoneNumber,
		&i.Role,
	)
	return i, err
}

const loginUser = `-- name: LoginUser :one
SELECT 
    id,
    username,
    password_hash,
    role
FROM users
WHERE username = $1 AND deleted_at IS NULL
`

type LoginUserRow struct {
	ID           uuid.UUID
	Username     string
	PasswordHash string
	Role         sql.NullString
}

func (q *Queries) LoginUser(ctx context.Context, username string) (LoginUserRow, error) {
	row := q.db.QueryRowContext(ctx, loginUser, username)
	var i LoginUserRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PasswordHash,
		&i.Role,
	)
	return i, err
}

const updatePassword = `-- name: UpdatePassword :exec
UPDATE users
SET 
    password_hash = $1
WHERE id = $2 AND password_hash = $3 AND deleted_at IS NULL
`

type UpdatePasswordParams struct {
	PasswordHash   string
	ID             uuid.UUID
	PasswordHash_2 string
}

func (q *Queries) UpdatePassword(ctx context.Context, arg UpdatePasswordParams) error {
	_, err := q.db.ExecContext(ctx, updatePassword, arg.PasswordHash, arg.ID, arg.PasswordHash_2)
	return err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET 
    username = $1,
    full_name = $2,
    phone_number = $3,
    updated_at = now()
WHERE id = $4 AND password_hash = $5 AND deleted_at IS NULL
`

type UpdateUserParams struct {
	Username     string
	FullName     string
	PhoneNumber  string
	ID           uuid.UUID
	PasswordHash string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser,
		arg.Username,
		arg.FullName,
		arg.PhoneNumber,
		arg.ID,
		arg.PasswordHash,
	)
	return err
}
